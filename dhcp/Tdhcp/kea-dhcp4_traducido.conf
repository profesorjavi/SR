// Esta es una configuración básica para el servidor Kea DHCPv4. Declaraciones de subred
// están en su mayoría comentados y no se enumera ninguna interfaz. Por lo tanto, los servidores
// no escuchará ni responderá a ninguna consulta.
// La configuración básica debe ampliarse para especificar las interfaces en las que
// los servidores deberían escuchar. Hay una serie de opciones de ejemplo definidas.
// Probablemente estos no tengan ningún sentido en tu red. Asegúrate de que al menos
// actualiza lo siguiente antes de ejecutar este ejemplo en tu red:
// - cambiar los nombres de la interfaz de red
// - cambia las subredes para que coincidan con tu red real
// - cambia los valores de las opciones para que coincidan con tu red
//
// Esta es sólo una configuración muy básica. Kea viene con una suite grande (más de 30)
// de ejemplos de configuración y extensa Guía del usuario de Kea. Por favor refiérase a
// esos materiales para comprender mejor lo que este software es capaz de hacer
// hacer. Los comentarios en este archivo de configuración a veces hacen referencia a secciones para obtener más información.
// detalles. Estos son números de sección en la Guía del usuario de Kea. La versión que coincide
// tu software debería venir con tu paquete Kea, pero también está disponible
// en la base de conocimientos de ISC (https://kea.readthedocs.io; el enlace directo para
// la versión estable es https://kea.readthedocs.io/).
//
// Este archivo de configuración contiene solo la configuración del servidor DHCPv4.
// Si las configuraciones para otros servicios de Kea también se incluyen en este archivo,
// son ignorados por el servidor DHCPv4.
{

// La configuración de DHCPv4 comienza aquí. Esta sección será leída por el servidor DHCPv4.
// y será ignorado por otros componentes.
"Dhcp4": {
    // Agregue nombres de sus interfaces de red para escuchar.
    "interfaces-config": {
        // Consulte la sección 8.2.4 para obtener más detalles. Probablemente quieras agregar solo
        // nombre de la interfaz (por ejemplo, "eth0" o dirección IPv4 específica en esa
        // nombre de la interfaz (por ejemplo, "eth0/192.0.2.1").
        "interfaces": [ ]

        // El servidor Kea DHCPv4 de forma predeterminada escucha utilizando sockets sin formato. Esto asegura
        // todos los paquetes, incluidos los enviados por clientes conectados directamente
        // que aún no tienen dirección IPv4, se reciben. Sin embargo, si su
        // el tráfico siempre se retransmite, a menudo es mejor utilizar el regular
        //Sockets UDP. Si quieres hacer eso, descomenta esta línea:
        // "tipo-socket-dhcp": "udp"
    },

    // Kea admite el canal de control, que es una forma de recibir gestión
    // comandos mientras el servidor se está ejecutando. Este es un socket de dominio Unix que
    // recibe comandos formateados en JSON, por ejemplo, config-set (que establece nuevos
    // configuración), config-reload (que le dice a Kea que recargue su
    // configuración desde archivo), statistic-get (para recuperar estadísticas) y muchos
    // más. Para obtener una descripción detallada, consulte las Secciones 8.8, 16 y 15.
    "enchufe de control": {
        "tipo de socket": "unix",
        "nombre-socket": "/run/kea/kea4-ctrl-socket"
    },

    // Utilice el backend de la base de datos de arrendamiento Memfile para almacenar los arrendamientos en un archivo CSV.
    // Dependiendo de cómo se compiló Kea, también puede admitir bases de datos SQL
    // (MySQL y/o PostgreSQL). Esos backends de bases de datos requieren más
    // parámetros, como nombre, host y posiblemente usuario y contraseña.
    // Hay ejemplos dedicados para cada backend. Consulte la Sección 7.2.2 "Arrendamiento
    // Almacenamiento" para más detalles.
    "base de datos de arrendamiento": {
        // Memfile es el backend más simple y fácil de usar. es un en memoria
        // Base de datos C++ que almacena su estado en un archivo CSV.
        "tipo": "archivomem",
        "intervalo lfc": 3600
    },

    // Kea permite almacenar reservas de host en una base de datos. Si su red es
    // pequeñas o tienes pocas reservas, probablemente sea más fácil conservarlas
    // en el archivo de configuración. Si su red es grande, generalmente es mejor
    // para usar la base de datos para ello. Para habilitarlo, descomente lo siguiente:
    // "base de datos-hosts": {
    // "tipo": "mysql",
    // "nombre": "kea",
    // "usuario": "kea",
    // "contraseña": "kea",
    // "host": "localhost",
    // "puerto": 3306
    // },
    // Consulte la Sección 7.2.3 "Almacenamiento de hosts" para obtener más detalles.

    // Configurar la recuperación de los arrendamientos vencidos y la afinidad de los arrendamientos.
    // Los arrendamientos vencidos se reclamarán cada 10 segundos. cada 25
    // segundos de arrendamientos reclamados, que han expirado hace más de 3600
    // hace segundos, será eliminado. Los límites para la recuperación de arrendamientos
    // son 100 concesiones o 250 ms para un solo ciclo. Un mensaje de advertencia
    // se registrará si todavía hay arrendamientos vencidos en el
    // base de datos después de 5 ciclos de recuperación consecutivos.
    "procesamiento-de-arrendamientos-expirados": {
        "temporizador-de-reclamación-tiempo-de-espera": 10,
        "tiempo-de-espera-del-temporizador-reclamado-de-descarga": 25,
        "tiempo de espera recuperado": 3600,
        "arrendamientos-reclamación-max": 100,
        "tiempo de recuperación máximo": 250,
        "ciclos-de-recuperación-no-advertidos": 5
    },

    // Los temporizadores globales especificados aquí se aplican a todas las subredes, a menos que haya
    // valores específicos de subred definidos en subredes particulares.
    "temporizador de renovación": 900,
    "temporizador de reenlace": 1800,
    "vida válida": 3600,

    // Aquí se pueden especificar muchos parámetros adicionales:
    // - definiciones de opciones (si desea definir opciones de proveedor, las suyas propias
    // opciones personalizadas o quizás manejar opciones estándar
    // que Kea aún no admite de forma inmediata)
    // - clases de cliente
    // - ganchos
    // - información de ddns (cómo el componente DHCPv4 puede llegar a un demonio DDNS)
    //
    // Algunos de ellos tienen ejemplos a continuación, pero hay otros parámetros.
    // Consulta la Guía de Usuario de Kea para conocerlos.

    // Estas son opciones globales. Se van a enviar cuando un cliente
    // los solicita, a menos que se sobrescriban con valores en ámbitos más específicos.
    // La jerarquía de alcance es:
    // - global (más genérico, se puede sobrescribir por clase, subred o host)
    // - clase (puede ser sobrescrita por subred o host)
    // - subred (el host puede sobrescribirla)
    // - host (el más específico, sobrescribe cualquier otro ámbito)
    //
    // No todas esas opciones tienen sentido. Por favor configure sólo aquellos que
    // son realmente útiles en su red.
    //
    // Para obtener una lista completa de las opciones actualmente admitidas por Kea, consulte
    // Sección 7.2.8 "Opciones estándar de DHCPv4". Kea también apoya
    // opciones de proveedor (consulte la Sección 7.2.10) y permite a los usuarios definir sus
    // opciones personalizadas propias (consulte la Sección 7.2.9).
    "opción-datos": [
        // Al especificar opciones, normalmente es necesario especificar
        // uno de (nombre o código) y datos. La especificación de opciones completa
        // cubre nombre, código, espacio, formato csv y datos.
        // el espacio predeterminado es "dhcp4", que suele ser correcto, a menos que
        // usar opciones de encapsulación. El formato csv por defecto es "verdadero", por lo que
        // esto también es correcto, a menos que quieras especificar el conjunto
        // valor de la opción como una cadena hexadecimal larga. Por ejemplo, para especificar
        // servidores de nombres de dominio, puedes hacer esto:
        // {
        // "nombre": "servidores de nombres de dominio",
        // "código": 6,
        // "formato csv": "verdadero",
        // "espacio": "dhcp4",
        // "datos": "192.0.2.1, 192.0.2.2"
        // }
        // pero hay mucho escrito, por lo que es más fácil hacer esto:
        {
            "nombre": "servidores de nombres de dominio",
            "datos": "192.0.2.1, 192.0.2.2"
        },

        // Normalmente la gente prefiere referirse a las opciones por sus nombres, por lo que
        // no es necesario recordar los nombres en clave. Sin embargo, a algunas personas les gusta
        // para usar valores numéricos. Por ejemplo, la opción "nombre-dominio" utiliza
        // código de opción 15, para que puedas hacer referencia a él mediante
        // "nombre": "nombre-dominio" o "código": 15.
        {
            "código": 15,
            "datos": "ejemplo.org"
        },

        // La búsqueda de dominios también es una opción popular. Le dice al cliente que
        // intenta resolver nombres dentro de esos dominios especificados. Para
        // ejemplo, se intentaría resolver el nombre "foo" como
        // foo.midominio.example.com y si falla, entonces como foo.example.com
        {
            "nombre": "búsqueda de dominio",
            "datos": "midominio.ejemplo.com, ejemplo.com"
        },

        // Las opciones de cadena que tienen una coma en sus valores deben tener
        // escapó (es decir, cada coma está precedida por dos barras invertidas).
        // Eso es porque las comas están reservadas para separar campos en
        // opciones compuestas. Al mismo tiempo, debemos ser conformes
        // con especificación JSON, que no permite "\,". Por lo tanto, el
        // Se necesita una notación de doble barra invertida, algo poco común.

        // Los escapes JSON legales son \ seguidos del carácter "\/bfnrt
        // o \u seguido de 4 números hexadecimales (actualmente Kea
        // solo admite \u0000 a \u00ff puntos de código).
        // El procesamiento CSV traduce '\\' a '\' y '\,' a ','
        // solo así, por ejemplo, '\x' se traduce en '\x'. Pero
        // como funciona en un valor de cadena JSON cada uno de estos '\'
        // los caracteres deben duplicarse en la entrada JSON.
        {
            "nombre": "nombre-del-archivo-de-arranque",
            "datos": "EST5EDT4\\,M3.2.0/02:00\\,M11.1.0/02:00"
        },

        // Las opciones que toman valores enteros se pueden especificar en
        // formato dec o hexadecimal. El formato hexadecimal puede ser simple (por ejemplo, abcd)
        // o con el prefijo 0x (por ejemplo, 0xabcd).
        {
            "nombre": "ip-ttl-predeterminado",
            "datos": "0xf0"
        }

        // Tenga en cuenta que Kea proporciona algunas de las opciones por sí solo. En particular,
        // envía el tipo de arrendamiento de dirección IP (código 51, basado en la vida útil
        // parámetro, máscara de subred (código 1, según la definición de subred), renovación
        // tiempo (código 58, basado en el parámetro del temporizador de renovación), tiempo de reenlace (código 59,
        // basado en el parámetro del temporizador de rebind).
    ],

    // Otros parámetros globales que se pueden definir aquí son definiciones de opciones
    // (esto es útil si desea utilizar opciones de proveedor, sus propias opciones personalizadas
    // opciones o quizás manejar opciones que Kea no maneja de forma inmediata
    // todavía).

    // También puedes definir clases. Si se definen clases, los paquetes entrantes
    // puede asignarse a clases específicas. Una clase de cliente puede representar cualquier
    // grupo de dispositivos que comparten alguna característica común, por ejemplo, Windows
    // dispositivos, iphones, impresoras rotas que requieren opciones especiales, etc.
    // Según la información de la clase, puedes permitir o rechazar clientes
    // para usar ciertas subredes, agregar opciones especiales para ellas o cambiar valores
    // de algunos campos fijos.
    "clases-cliente": [
        {
            // Esto especifica un nombre de esta clase. Es útil si lo necesitas
            // hace referencia a esta clase.
            "nombre": "voip",

            // Esto es una prueba. Es una expresión que está siendo evaluada en
            // cada paquete entrante. Se supone que debe evaluar a cualquiera de los dos
            // verdadero o falso. Si es cierto, el paquete se agrega al especificado
            // clase. Consulte la Sección 12 para obtener una lista de expresiones disponibles. Allá
            // son varias docenas. Sección 8.2.14 para más detalles sobre DHCPv4
            // clasificación y Sección 9.2.19 para DHCPv6.
            "prueba": "subcadena(opción[60].hex,0,6) == 'Aastra'",

            // Si un cliente pertenece a esta clase, puedes definir un comportamiento adicional.
            // Por ejemplo, ciertos campos en el paquete DHCPv4 se configurarán en
            // ciertos valores.
            "siguiente-servidor": "192.0.2.254",
            "servidor-hostname": "hal9000",
            "nombre-archivo-de-arranque": "/dev/null"

            // También puedes definir valores de opción aquí si quieres dispositivos de
            // esta clase para recibir opciones especiales.
        }
    ],

    // Otra cosa posible aquí son los ganchos. Kea apoya un poderoso mecanismo
    // que permite cargar librerías externas que pueden extraer información y
    // incluso influye en cómo el servidor procesa los paquetes. Esas bibliotecas incluyen
    // capacidades adicionales de registro forense, capacidad de reservar hosts en
    // formas más flexibles e incluso agregar comandos adicionales. Para obtener una lista de disponibles
    // bibliotecas de ganchos, consulte https://gitlab.isc.org/isc-projects/kea/wikis/Hooks-available.
    // "bibliotecas-ganchos": [
    // {
    // // La biblioteca de registro forense genera un tipo de pista de auditoría forense
    // // de todos los dispositivos atendidos por Kea, incluidos sus identificadores
    // // (como dirección MAC), su ubicación en la red, horarios
    // // cuando estaban activos, etc.
    // "biblioteca": "/usr/lib/x86_64-linux-gnu/kea/hooks/libdhcp_legal_log.so",
    // "parámetros": {
    // "ruta": "/var/lib/kea",
    // "nombre-base": "kea-forensic4"
    // }
    // },
    // {
    // // Identificador flexible (flex-id). El software Kea proporciona una manera de
    // // manejar reservas de host que incluyen direcciones, prefijos,
    // // opciones, clases de cliente y otras características. La reserva puede
    // // basarse en la dirección de hardware, DUID, id de circuito o id de cliente en
    // // DHCPv4 y usando dirección de hardware o DUID en DHCPv6. Sin embargo,
    // // a veces hay situaciones en las que la reserva es mayor
    // // complejo, por ejemplo, usa otras opciones mencionadas anteriormente, usa parte
    // // de opciones específicas o quizás incluso una combinación de varias
    // // opciones y campos para identificar de forma única a un cliente. Esos escenarios
    // // son abordados por la aplicación de enlace de Identificadores flexibles.
    // "biblioteca": "/usr/lib/x86_64-linux-gnu/kea/hooks/libdhcp_flex_id.so",
    // "parámetros": {
    // "identificador-expresión": "relay4[2].hex"
    // }
    // }
    // ],

    // A continuación se muestra un ejemplo de una declaración de subred IPv4 simple. Descomentar para habilitar
    // él. Esta es una lista, indicada con [ ], de estructuras, cada una indicada con
    // { }. Cada estructura describe una única subred y puede tener varias
    // parámetros. Uno de esos parámetros es "grupos", que también es una lista de
    // estructuras.
    "subred4": [
        {
            // Esto define toda la subred. Kea utilizará esta información para
            // determina dónde están conectados los clientes. este es el todo
            // subred en su red. Este es un parámetro obligatorio para cada
            // subred.
            "subred": "192.0.2.0/24",

            // Los grupos definen la parte real de su subred que se rige
            // por Kea. Técnicamente este es un parámetro opcional, pero es
            // casi siempre es necesario para que DHCP haga su trabajo. Si lo omites,
            // los clientes no podrán obtener direcciones, a menos que haya
            // reservas de host definidas para ellos.
            "grupos": [ { "grupo": "192.0.2.1 - 192.0.2.200" } ],

            // Estas son opciones específicas de la subred. En la mayoría de los casos,
            // necesitas definir al menos la opción de enrutadores, ya que sin esto
            // opción tus clientes no podrán alcanzar su valor predeterminado
            // puerta de enlace y no tendrá conectividad a Internet.
            "opción-datos": [
                {
                    // Para cada subred IPv4 lo más probable es que necesites especificar en
                    // menos un enrutador.
                    "nombre": "enrutadores",
                    "datos": "192.0.2.1"
                }
            ],

            // Kea ofrece un mecanismo de reservas para anfitriones. Kea apoya las reservas
            // por varios tipos diferentes de identificadores: hw-address
            // (hardware/dirección MAC del cliente), duid (DUID insertado por el
            // cliente), client-id (identificador de cliente insertado por el cliente) y
            // id-circuito (identificador de circuito insertado por el agente de retransmisión).
            //
            // Kea también admite un identificador flexible (flex-id), que le permite
            // especifica una expresión que se evalúa para cada paquete entrante.
            // El valor resultante se utiliza como identificador.
            //
            // Tenga en cuenta que las reservas son específicas de la subred en Kea. Esto es
            // diferente de ISC DHCP. Tenga esto en cuenta al migrar
            // tus configuraciones.
            "reservas": [

                // Esta es una reserva para una dirección MAC/hardware específica.
                // Es una reserva bastante simple: solo una dirección y nada
                // demás.
                {
                    "dirección-hw": "1a:1b:1c:1d:1e:1f",
                    "dirección-ip": "192.0.2.201"
                },

                // Esta es una reserva para un ID de cliente específico. También muestra
                // este cliente obtendrá un nombre de host reservado. Un nombre de host puede
                // definirse para cualquier tipo de identificador, no solo client-id.
                {
                    "id-cliente": "01:11:22:33:44:55:66",
                    "dirección-ip": "192.0.2.202",
                    "hostname": "especial-copo de nieve"
                },

                // La tercera reserva se basa en DUID. Esta reserva define
                // valores de opción especiales para este cliente en particular. Si el
                // la opción de servidores de nombres de dominio se habría definido a nivel global,
                // nivel de subred o clase, los valores específicos del host tienen preferencia.
                {
                    "duid": "01:02:03:04:05",
                    "dirección-ip": "192.0.2.203",
                    "datos-opción": [ {
                        "nombre": "servidores de nombres de dominio",
                        "datos": "10.1.1.202, 10.1.1.203"
                    } ]
                },

                // La cuarta reserva se basa en id-circuito. Esta es una opción
                // insertado por el agente de retransmisión que reenvía el paquete desde el cliente
                // al servidor. En este ejemplo, al host también se le asigna el proveedor.
                // opciones específicas.
                //
                // Al usar reservas, es útil configurar
                // reservas-globales, reservas-en-subred,
                // reservas fuera del grupo (parámetros específicos de la subred)
                // y identificadores-reserva-host (parámetro global).
                {
                    "id-cliente": "01:12:23:34:45:56:67",
                    "dirección-ip": "192.0.2.204",
                    "opción-datos": [
                        {
                            "nombre": "vivso-subopciones",
                            "datos": "4491"
                        },
                        {
                            "nombre": "servidores tftp",
                            "espacio": "proveedor-4491",
                            "datos": "10.1.1.202, 10.1.1.203"
                        }
                    ]
                },
                // Esta reserva es para un cliente que necesita DHCPv4 específico
                // campos a configurar. Tres campos admitidos son el siguiente servidor,
                // nombre-host-servidor y nombre-archivo-de-arranque
                {
                    "id-cliente": "01:0a:0b:0c:0d:0e:0f",
                    "dirección-ip": "192.0.2.205",
                    "siguiente-servidor": "192.0.2.1",
                    "servidor-hostname": "hal9000",
                    "nombre-archivo-de-arranque": "/dev/null"
                },
                // Esta reserva utiliza un identificador flexible. En lugar de
                // basándose en un campo específico, el administrador del sistema puede definir una expresión
                // similar a lo que se utiliza para la clasificación de clientes,
                // por ejemplo, subcadena(relé[0].opción[17],0,6). Luego, en base a la
                // valor de esa expresión para el paquete entrante, la reserva
                // coincide. La expresión se puede especificar como hexadecimal o
                // texto sin formato usando comillas simples.
                //
                // Nota: el identificador flexible requiere que la biblioteca de enlaces flex_id sea
                // cargado para trabajar.
                {
                    "flex-id": "'s0mEVaLue'",
                    "dirección-ip": "192.0.2.206"
                }
                // Puedes agregar más reservas aquí.
            ]
            // Puedes agregar más subredes allí.
        }
    ],

    // Hay muchos, muchos más parámetros que el servidor DHCPv4 puede utilizar.
    // No se agregaron aquí para no abrumar a la gente con demasiado
    // información a la vez.

    // La configuración de registro comienza aquí. Kea utiliza diferentes registradores para registrar varios
    // actividades. Para obtener detalles (por ejemplo, nombres de registradores), consulte el Capítulo 18.
    "madereros": [
    {
        // Esta sección afecta a kea-dhcp4, que es el registrador base para DHCPv4
        // componente. Le dice al servidor DHCPv4 que escriba todos los mensajes de registro (en
        // gravedad INFO o más) en un archivo.
        "nombre": "kea-dhcp4",
        "opciones_de_salida": [
            {
                // Especifica el archivo de salida. Hay varios valores especiales.
                // soportado:
                // - stdout (imprime en salida estándar)
                // - stderr (imprime en caso de error estándar)
                // - syslog (registros en syslog)
                // - syslog:name (registra en syslog usando el nombre especificado)
                // Cualquier otro valor se considera un nombre del archivo
                "salida": "salida estándar",

                // Patrón de registro más corto adecuado para usar con systemd,
                // evita información redundante
                "patrón": "%-5p %m\n",

                // Esto determina si la salida del registro se vacía en el disco después
                // cada escritura.
                // "flujo": falso,

                // Esto especifica el tamaño máximo del archivo antes de ser
                // girado.
                // "tamaño máximo": 1048576,

                // Esto especifica el número máximo de archivos rotados que se conservarán.
                // "maxver": 8
            }
        ],
        // Esto especifica la gravedad de los mensajes de registro que se deben conservar. Valores admitidos
        // son: FATAL, ERROR, ADVERTENCIA, INFORMACIÓN, DEPURACIÓN
        "gravedad": "INFORMACIÓN",

        // Si se especifica el nivel DEBUG, se utiliza este valor. 0 es el menos detallado,
        // 99 es el más detallado. Tenga cuidado, Kea puede generar muchísimo
        // de registros si se le indica que lo haga.
        "nivel de depuración": 0
    }
  ]
}
}
